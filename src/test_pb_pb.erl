%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.5
-module(test_pb_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("test_pb_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type content() :: #content{}.
-export_type(['content'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
        #content{} -> e_msg_content(Msg, TrUserData)
    end.



e_msg_content(Msg, TrUserData) ->
    e_msg_content(Msg, <<>>, TrUserData).


e_msg_content(#content{name = F1, code = F2}, Bin,
              TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    e_type_string(TrF1, <<Bin/binary, 10>>)
                end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_content_code(TrF2, B1, TrUserData)
        end
    end.

e_field_content_code([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2),
    e_field_content_code(Rest, Bin3, TrUserData);
e_field_content_code([], Bin, _TrUserData) -> Bin.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        content -> d_msg_content(Bin, TrUserData)
    end.



d_msg_content(Bin, TrUserData) ->
    dfp_read_field_def_content(Bin,
                               0,
                               0,
                               id(undefined, TrUserData),
                               id([], TrUserData),
                               TrUserData).

dfp_read_field_def_content(<<10, Rest/binary>>, Z1, Z2,
                           F1, F2, TrUserData) ->
    d_field_content_name(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_content(<<16, Rest/binary>>, Z1, Z2,
                           F1, F2, TrUserData) ->
    d_field_content_code(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_content(<<>>, 0, 0, F1, F2,
                           TrUserData) ->
    #content{name = F1,
             code = lists_reverse(F2, TrUserData)};
dfp_read_field_def_content(Other, Z1, Z2, F1, F2,
                           TrUserData) ->
    dg_read_field_def_content(Other,
                              Z1,
                              Z2,
                              F1,
                              F2,
                              TrUserData).

dg_read_field_def_content(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_content(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F1,
                              F2,
                              TrUserData);
dg_read_field_def_content(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_content_name(Rest, 0, 0, F1, F2, TrUserData);
        16 ->
            d_field_content_code(Rest, 0, 0, F1, F2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_content(Rest, 0, 0, F1, F2, TrUserData);
                1 -> skip_64_content(Rest, 0, 0, F1, F2, TrUserData);
                2 ->
                    skip_length_delimited_content(Rest,
                                                  0,
                                                  0,
                                                  F1,
                                                  F2,
                                                  TrUserData);
                5 -> skip_32_content(Rest, 0, 0, F1, F2, TrUserData)
            end
    end;
dg_read_field_def_content(<<>>, 0, 0, F1, F2,
                          TrUserData) ->
    #content{name = F1,
             code = lists_reverse(F2, TrUserData)}.

d_field_content_name(<<1:1, X:7, Rest/binary>>, N, Acc,
                     F1, F2, TrUserData)
    when N < 57 ->
    d_field_content_name(Rest,
                         N + 7,
                         X bsl N + Acc,
                         F1,
                         F2,
                         TrUserData);
d_field_content_name(<<0:1, X:7, Rest/binary>>, N, Acc,
                     _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_content(Rest2,
                               0,
                               0,
                               NewFValue,
                               F2,
                               TrUserData).


d_field_content_code(<<1:1, X:7, Rest/binary>>, N, Acc,
                     F1, F2, TrUserData)
    when N < 57 ->
    d_field_content_code(Rest,
                         N + 7,
                         X bsl N + Acc,
                         F1,
                         F2,
                         TrUserData);
d_field_content_code(<<0:1, X:7, Rest/binary>>, N, Acc,
                     F1, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
                                            Acc):32/unsigned-native>>,
    dfp_read_field_def_content(Rest,
                               0,
                               0,
                               F1,
                               cons(NewFValue, F2, TrUserData),
                               TrUserData).


skip_varint_content(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                    F1, F2, TrUserData) ->
    skip_varint_content(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_content(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                    F1, F2, TrUserData) ->
    dfp_read_field_def_content(Rest,
                               Z1,
                               Z2,
                               F1,
                               F2,
                               TrUserData).


skip_length_delimited_content(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_content(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F1,
                                  F2,
                                  TrUserData);
skip_length_delimited_content(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_content(Rest2,
                               0,
                               0,
                               F1,
                               F2,
                               TrUserData).


skip_32_content(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
                TrUserData) ->
    dfp_read_field_def_content(Rest,
                               Z1,
                               Z2,
                               F1,
                               F2,
                               TrUserData).


skip_64_content(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
                TrUserData) ->
    dfp_read_field_def_content(Rest,
                               Z1,
                               Z2,
                               F1,
                               F2,
                               TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
        #content{} -> merge_msg_content(Prev, New, TrUserData)
    end.

merge_msg_content(#content{name = PFname,
                           code = PFcode},
                  #content{name = NFname, code = NFcode}, TrUserData) ->
    #content{name =
                 if NFname =:= undefined -> PFname;
                    true -> NFname
                 end,
             code = 'erlang_++'(PFcode, NFcode, TrUserData)}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
        #content{} -> v_msg_content(Msg, [content], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_content/3}).
v_msg_content(#content{name = F1, code = F2}, Path,
              _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if is_list(F2) ->
           _ = [v_type_int32(Elem, [code | Path]) || Elem <- F2],
           ok;
       true ->
           mk_type_error({invalid_list_of, int32}, F2, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
                  N,
                  Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32},
                  X,
                  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} ->
            mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
                                       lists:reverse(PathR)),
                             ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{msg, content},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
              occurrence = optional, opts = []},
       #field{name = code, fnum = 2, rnum = 3, type = int32,
              occurrence = repeated, opts = []}]}].


get_msg_names() -> [content].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(content) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
            occurrence = optional, opts = []},
     #field{name = code, fnum = 2, rnum = 3, type = int32,
            occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.5".

gpb_version_as_list() ->
    [3,26,5].
